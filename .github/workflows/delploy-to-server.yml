name: Code deploy

on:
  workflow_dispatch: # 이 태그가 있으면 workflow를 매뉴얼하게 트리거할 수 있음.
  push: # push할 때 작동
    branches: # 대상이 될 브랜치
      - main
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create SSH Key
        run: | # access key를 actions 내부 워크스페이스에 pem파일로 저장하고 권한을 확보
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ralo.pem
          chmod 600 ~/.ssh/ralo.pem
      - name: Add known host
        run: |
          ssh-keyscan -p ${{ secrets.SSH_PORT }} \
            -t rsa,ecdsa,ed25519 \
            ${{ secrets.SSH_HOST }} \
            >> ~/.ssh/known_hosts
      # 3) SSH로 서버 접속 후 배포
      - name: Deploy to server via SSH
        run: |
          echo "== [DEPLOY] SSH 접속 시작 =="
          ssh -i ~/.ssh/ralo.pem -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "== [서버 접속 성공] =="
            set -e
            echo "== (1) 프로젝트 디렉토리 이동 =="
            cd /home/rlacks2011/GalaeMalae/GalaeMalae-BE || { echo "❌ 디렉토리 이동 실패"; exit 1; }
            echo "== (2) Git 최신 코드 가져오기 =="
            git fetch origin main || { echo "❌ git fetch 실패"; exit 1; }
            git reset --hard origin/main || { echo "❌ git reset 실패"; exit 1; }
            echo "== (3) Docker 이미지 빌드 =="
            docker build -t galaemalae-app:latest . || { echo "❌ Docker 빌드 실패"; exit 1; }
            echo "== (4) 기존 컨테이너 중지 및 삭제 =="
            if [ "$(docker ps -a -q -f name=galaemalae-container)" ]; then
              echo "컨테이너가 이미 존재합니다. 중지 및 삭제를 시도합니다."
              docker stop galaemalae-container || echo "⚠️ 컨테이너 중지 실패 (무시)"
              docker rm galaemalae-container || echo "⚠️ 컨테이너 삭제 실패 (무시)"
            else
              echo "기존 컨테이너가 없습니다."
            fi
            echo "== (5) 새 컨테이너 실행 =="
            docker run -d \
              --name galaemalae-container \
              --network attendance-deploy_attendance-net \
              --label traefik.enable=true \
              --label 'traefik.http.routers.galaemalae.rule=Host(`api.galaemalae.com`)' \
              --label traefik.http.routers.galaemalae.entrypoints=websecure \
              --label traefik.http.routers.galaemalae.tls=true \
              --label traefik.http.routers.galaemalae.tls.certresolver=letsencrypt \
              --label traefik.http.services.galaemalae.loadbalancer.server.port=8082 \
              -e MYSQL_HOST=attendance_db \
              -e MYSQL_PORT=3306 \
              -e MYSQL_USER=${{ secrets.DB_USER }} \
              -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MYSQL_DATABASE=galae_malae \
              -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
              -e API_HOST=0.0.0.0 \
              -p 8082:8082 \
              galaemalae-app:latest || { echo "❌ 컨테이너 실행 실패"; exit 1; }
            echo "== (6) 컨테이너 로그 확인 (마지막 100줄) =="

            docker network connect web galaemalae-container
            docker logs galaemalae-container --tail 100 || echo "⚠️ 로그 확인 실패 (무시)"
            echo "✅ [DEPLOY 완료]"
          EOF
        shell: bash
